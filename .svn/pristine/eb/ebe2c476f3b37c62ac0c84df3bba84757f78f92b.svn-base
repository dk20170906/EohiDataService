using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;

using System.Threading;
using System.Data;
using System.Collections;
using Newtonsoft.Json;
namespace WFServerWeb
{
    /// <summary>
    /// WSWF 的摘要说明
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。
    // [System.Web.Script.Services.ScriptService]
    public class WSWF : System.Web.Services.WebService
    {
        /// <summary>
        /// 接收发起流程命令
        /// </summary>
        /// <param name="WFName">流程名称</param>
        /// <param name="WFDataID">数据表相对应数据ID</param>
        /// <param name="OpeManID">发起人ID</param>
        [WebMethod]
        public void StartWF(string WFName, string WFDataID, string OpeManID)
        {
            string str = "123";
            string str2 = "";
            WFGlobal.StartWFCmdArr.Enqueue(new struCmdStartWF(WFName,WFDataID,OpeManID));
        }

        /// <summary>
        /// 接收流程流转命令
        /// </summary>
        /// <param name="InstanceID">流程实例的ID</param>
        /// <param name="NodeID">节点ID</param>
        /// <param name="ApprovalOpinion">申批意见，同意，不同意，驳回上级，驳回至发起人</param>
        /// <param name="OpeManID">申批人ID</param>
        /// <param name="ApprovalReason">申批备注</param>
        [WebMethod]
        public void WFTransmit(string InstanceID, string NodeID, EApprovalOpinion ApprovalOpinion, string OpeManID, string ApprovalReason)
        {
            WFGlobal.WFTransmitCmdArr.Enqueue(new struCmdWFTransmit(InstanceID, NodeID, ApprovalOpinion, OpeManID, ApprovalReason));
        }

        /// <summary>
        /// 启动工作流服务
        /// </summary>
        [WebMethod]
        public void StartServer()
        {
            if (WFGlobal.ServerStarted == false)
            {
                WFGlobal.ServerStarted = true;
                Thread thwfserver = new Thread(WFServer);
                thwfserver.Start();
            }
        }

        /// <summary>
        /// 工作流服务命令处理
        /// </summary>
        private void WFServer()
        {
            while (WFGlobal.ServerStarted)
            {
                while (WFGlobal.StartWFCmdArr.Count > 0)
                {
                    struCmdStartWF stcsw = (struCmdStartWF)WFGlobal.StartWFCmdArr.Dequeue();
                    StartWFDeal(stcsw.WFName, stcsw.WFDataID, stcsw.OpeManID);
                    Thread.Sleep(10);
                }

                while (WFGlobal.WFTransmitCmdArr.Count > 0)
                {
                    struCmdWFTransmit stwft = (struCmdWFTransmit)WFGlobal.WFTransmitCmdArr.Dequeue();
                    WFTransmitDeal(stwft.InstanceID, stwft.NodeID, stwft.ApprovalOpinion, stwft.OpeManID, stwft.ApprovalReason);
                    Thread.Sleep(10);
                }

                Thread.Sleep(10);
            }
        }

        /// <summary>
        /// 结束工作流服务
        /// </summary>
        [WebMethod]
        public void StopServer()
        {
            if(WFGlobal.ServerStarted==true)
                WFGlobal.ServerStarted = false;
        }

        /// <summary>
        /// 发起流程命令处理
        /// </summary>
        /// <param name="WFName">流程名称</param>
        /// <param name="WFDataID">数据表相对应数据ID</param>
        /// <param name="OpeManID">发起人ID</param>        
        private void StartWFDeal(string WFName, string WFDataID, string OpeManID)
        {
            string WFID = CDataHelper.GetData("select top 1 flowchart_id from " + CTableName.FlowChart + " where flowchart_name='" + WFName + "' order by flowchart_version desc");

            if (WFID == null)
            {
                return;
            }

            string StartNodeID = CCommonFunc.GetStartNodeID(WFID);

            string NewInstanceID = Guid.NewGuid().ToString();
            //记录工作流实例
            PutDownNewInstance(WFName, WFDataID, OpeManID, WFID, NewInstanceID);

            //记录发起人、发起节点
            if (StartNodeID == null)
            {
                CCommonFunc.SetInstanceError(NewInstanceID, "缺少开始节点");
                return;
            }

            //将接收人设定为发起人
            CDataHelper.ExecuteNonQuery("insert into " + CTableName.FlowChartReceiver + "(instance_id,node_id,user_id,approval_opinion,operate_time,approval_status) values('" + NewInstanceID + "','" + StartNodeID + "','" + OpeManID + "','" + EApprovalOpinion.同意.ToString() + "','" + DateTime.Now.ToString() + "','" + EApprovalStatus.Complete.ToString() + "')");
            
            //流程流转
            WFTransmitDeal(NewInstanceID, StartNodeID, EApprovalOpinion.同意, OpeManID, "");
        }

        /// <summary>
        /// 流程流转命令处理
        /// </summary>
        /// <param name="InstanceID">流程实例的ID</param>
        /// <param name="NodeID">节点ID</param>
        /// <param name="ApprovalOpinion">申批意见，同意，不同意，驳回上级，驳回至发起人</param>
        /// <param name="OpeManID">申批人ID</param>
        /// <param name="ApprovalReason">申批备注</param>
        private void WFTransmitDeal(string InstanceID, string NodeID, EApprovalOpinion ApprovalOpinion, string OpeManID, string ApprovalReason)
        {
            //获取并执行审批脚本
            string script = CDataHelper.GetData("select [approvescript] from "+CTableName.FlowChartNodeApproveItem+" where node_id='" + NodeID + "' and [approvename]='" + ApprovalReason.ToString() + "'");
            if (script != null && script != "")
            {
                CScriptOpe.ScriptExec(script, InstanceID);
            }

            //记录审批意见和状态
            PutDownApprovalOpinion(InstanceID, NodeID, ApprovalOpinion, OpeManID, ApprovalReason);

            if (IsNodeApprovalComplete(InstanceID, NodeID))
            {
                //记录审批状态
                CDataHelper.ExecuteNonQuery("update " + CTableName.FlowChartReceiver + " set [approval_status]='" + EApprovalStatus.Complete.ToString() + "' where instance_id='" + InstanceID + "' and node_id='" + NodeID + "'");

                //获取并执行流转定义脚本
                string NextNodeID = GetNextNodeIDByCurrentNodeID(NodeID, ApprovalOpinion);
                if (CCommonFunc.IsThroughEnable(InstanceID,NextNodeID))
                {
                    if (ApprovalOpinion == EApprovalOpinion.驳回上级)
                    {
                        CReturnUP.ReturnUp(InstanceID, NodeID, NextNodeID);
                    }
                    else if (ApprovalOpinion == EApprovalOpinion.驳回至发起人)
                    {
                        CReturnToStart.ReturnToStart(InstanceID, NodeID, NextNodeID);
                    }
                    else if (ApprovalOpinion == EApprovalOpinion.不同意)
                    {
                        CGoEnd.GoEnd(InstanceID, NodeID, NextNodeID);
                    }
                    else
                    {
                        CGoNextNode.GoNextNodesFromOtherNode(InstanceID, NodeID);
                    }
                }
            }
        }

        private bool IsNodeApprovalComplete(string InstanceID, string NodeID)
        {
            string ReceiverCount = CDataHelper.GetData("select count(*) from " + CTableName.FlowChartReceiver + " where instance_id='" + InstanceID + "' and node_id='" + NodeID + "'");
            string CompleteCount = CDataHelper.GetData("select count(*) from " + CTableName.FlowChartReceiver + " where instance_id='" + InstanceID + "' and node_id='" + NodeID + "' and approval_status='"+EApprovalStatus.Complete.ToString()+"'");
            if(ReceiverCount==CompleteCount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 根据不同的审批意见获取不同的下一级节点
        /// </summary>
        /// <param name="CurrentNodeID"></param>
        /// <param name="Apo"></param>
        /// <returns></returns>
        public static string GetNextNodeIDByCurrentNodeID(string CurrentNodeID, EApprovalOpinion Apo)
        {
            string WFID = CDataHelper.GetData("select flowchart_id from " + CTableName.FlowChartNode + " where node_id='" + CurrentNodeID + "'");
            if (Apo == EApprovalOpinion.同意)
            {
                return CDataHelper.GetData("select next_node_id from " + CTableName.FlowChartLine + " where node_id='" + CurrentNodeID + "'");
            }
            else if (Apo == EApprovalOpinion.不同意)
            {
                return CDataHelper.GetData("select [node_id] from " + CTableName.FlowChartNode + " where [flowchart_id]='" + WFID + "' and [nodetype]='" + CNodeType.EndType + "'");
            }
            else if (Apo == EApprovalOpinion.驳回上级)
            {
                string UpNodeID = null;
                while (true)
                {
                    UpNodeID = CDataHelper.GetData("select node_id from " + CTableName.FlowChartLine + " where next_node_id='" + CurrentNodeID + "'");
                    string NodeType = CCommonFunc.GetNodeType(UpNodeID);
                    if (NodeType != CNodeType.SwitchType && NodeType != CNodeType.ProcessType)
                    {
                        break;
                    }
                    CurrentNodeID = UpNodeID;
                }
                return UpNodeID;
            }
            else
            {
                return CCommonFunc.GetStartNodeID(WFID);
            }
        }

        /// <summary>
        /// 结束工作流实例
        /// </summary>
        /// <param name="InstanceID"></param>
        [WebMethod]
        public void TerminateInstance(string InstanceID)
        {
            CCommonFunc.SetInstanceComplete(InstanceID);
        }

        /// <summary>
        /// 获取活动流程实例
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetInstanceActive()
        {
            return GetInstance("SELECT f.flowchart_name,i.[flowchart_id],i.[flowchart_version],i.[instance_id],i.[cre_date] ,u.user_name,i.[cre_man],i.[instance_status],i.[instance_message] FROM [kailifon].[dbo].[a_flowchart_instance] as i left join "+CTableName.FlowChart+" as f on(f.flowchart_id=i.flowchart_id) left join a_user as u on (i.cre_man=u.user_id) where i.[instance_status]='" + EInstanceStatus.Active.ToString() + "'");
        }

        /// <summary>
        /// 获取所有流程实例
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetInstanceAll()
        {
            return GetInstance("SELECT f.flowchart_name,i.[flowchart_id],i.[flowchart_version],i.[instance_id],i.[cre_date] ,u.user_name,i.[cre_man],i.[instance_status],i.[instance_message] FROM [kailifon].[dbo].[a_flowchart_instance] as i left join "+CTableName.FlowChart+" as f on(f.flowchart_id=i.flowchart_id) left join a_user as u on (i.cre_man=u.user_id) ");
        }

        /// <summary>
        /// 获取活动流程实例的dt数据
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataTable GetInstanceAllDataTable()
        {

            string strsql = "SELECT f.flowchart_name,i.[flowchart_id],i.[flowchart_version],i.[instance_id],i.[cre_date] ,u.user_name,i.[cre_man],i.[instance_status],i.[instance_message] FROM [kailifon].[dbo].[a_flowchart_instance] as i left join "+CTableName.FlowChart+" as f on(f.flowchart_id=i.flowchart_id) left join a_user as u on (i.cre_man=u.user_id) ";
            return CDataHelper.GetDataTable(strsql);
        }

        /// <summary>
        /// 获取流程实例的流转路径
        /// </summary>
        /// <param name="InstanceID"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetInstanceFlowHistory(string InstanceID)
        {
            string strHistory = null;
            DataTable dtHistory = CDataHelper.GetDataTable("select node_id,next_node_id from "+CTableName.FlowChartHistory+" where instance_id='" + InstanceID + "' order by ID asc");
            if (dtHistory != null)
            {
                if (dtHistory.Rows.Count > 0)
                {
                    struWFJoin[] FlowHistory = new struWFJoin[dtHistory.Rows.Count];
                    for (int i = 0; i < dtHistory.Rows.Count; i++)
                    {
                        string NodeID = dtHistory.Rows[i]["node_id"].ToString();
                        string NextNodeID = dtHistory.Rows[i]["next_node_id"].ToString();
                        string SourcePoint = null;
                        string TargetPoint = null;
                        string Line = null;
                        DataTable dtLine = CDataHelper.GetDataTable("select top 1 sourcepoint,targetpoint,line_id from "+CTableName.FlowChartLine+" where node_id='" + NodeID + "' and next_node_id='" + NextNodeID + "'");
                        if (dtLine != null)
                        {
                            if (dtLine.Rows.Count > 0)
                            {
                                SourcePoint = dtLine.Rows[0]["sourcepoint"].ToString();
                                TargetPoint = dtLine.Rows[0]["targetpoint"].ToString();
                                Line = dtLine.Rows[0]["line_id"].ToString();
                            }
                        }
                        FlowHistory[i] = new struWFJoin(NodeID, NextNodeID, SourcePoint, TargetPoint, Line);
                    }
                    strHistory = JsonConvert.SerializeObject(FlowHistory);
                }
            }
            return strHistory;
        }
        /// <summary>
        /// 获取当前节点
        /// </summary>
        /// <param name="InstanceID">当前实例id</param>
        /// <returns></returns>
        [WebMethod]
        public string GetActiveNode(string InstanceID)
        {
            string ActiveNodeStr = "";
            DataTable dtActiveNode = CDataHelper.GetDataTable("select distinct node_id from " + CTableName.FlowChartReceiver + " where instance_id='" + InstanceID + "' and approval_status='" + EApprovalStatus.Active.ToString() + "'");
            if (dtActiveNode != null)
            {
                for (int i = 0; i < dtActiveNode.Rows.Count; i++)
                {
                    ActiveNodeStr += dtActiveNode.Rows[i][0].ToString()+";";
                }
                if (ActiveNodeStr.Length > 0)
                {
                    ActiveNodeStr = ActiveNodeStr.Substring(0, ActiveNodeStr.Length - 1);
                }
            }
            return ActiveNodeStr;
        }
        
        /// <summary>
        /// 记录新发起的工作流实例
        /// </summary>
        /// <param name="WFName">工作流名称</param>
        /// <param name="WFDataID">工作流实例对应的数据的ID</param>
        /// <param name="OpeManID">操作人</param>
        /// <param name="WFID">工作流ID</param>
        /// <param name="NewInstanceID">新工作流实例ID</param>
        public void PutDownNewInstance(string WFName, string WFDataID, string OpeManID, string WFID, string NewInstanceID)
        {
            string WFVersion = CDataHelper.GetData("select top 1 isnull(flowchart_version,'') as flowchart_version from " + CTableName.FlowChart + " where flowchart_name='" + WFName + "' order by id desc");
            if (WFVersion == null)
            {
                CCommonFunc.SetInstanceError(NewInstanceID, "缺少工作流版本号");
                return;
            }

            string DateTimeNow = DateTime.Now.ToString();
            string cmdPutDownInstance = "insert into " + CTableName.FlowChartInstance + "(flowchart_id,flowchart_version,instance_id,cre_date,cre_man,instance_status) values('" + WFID + "','" + WFVersion + "','" + NewInstanceID + "','" + DateTimeNow + "','" + OpeManID + "','" + EInstanceStatus.Active.ToString() + "')";
            CDataHelper.ExecuteNonQuery(cmdPutDownInstance);

            string cmdPutDownDataSource = "insert into " + CTableName.FlowChartPars + "(instance_id,keyvalue) values('" + NewInstanceID + "','" + WFDataID + "')";
            CDataHelper.ExecuteNonQuery(cmdPutDownDataSource);
        }

        /// <summary>
        /// 获取工作流实例
        /// </summary>
        /// <param name="strsql"></param>
        /// <returns></returns>
        string GetInstance(string strsql)
        {
            string strInstance = null;

            DataTable dtInstance = CDataHelper.GetDataTable(strsql);
            if (dtInstance != null)
            {
                if (dtInstance.Rows.Count > 0)
                {
                    struInstance[] struInst = new struInstance[dtInstance.Rows.Count];
                    for (int i = 0; i < dtInstance.Rows.Count; i++)
                    {
                        string FlowName = dtInstance.Rows[i]["flowchart_name"].ToString();
                        string FlowID = dtInstance.Rows[i]["flowchart_id"].ToString();
                        string FlowVersion = dtInstance.Rows[i]["flowchart_version"].ToString();
                        string InstanceID = dtInstance.Rows[i]["instance_id"].ToString();
                        string CreateDate = dtInstance.Rows[i]["cre_date"].ToString();
                        string CreateManName = dtInstance.Rows[i]["user_name"].ToString();
                        string CreateManID = dtInstance.Rows[i]["cre_man"].ToString();
                        string EInstanceStatus = dtInstance.Rows[i]["instance_status"].ToString();
                        string InstanceMessage = dtInstance.Rows[i]["instance_message"].ToString();
                        struInst[i] = new struInstance(FlowName, FlowID, FlowVersion, InstanceID, CreateDate, CreateManName, CreateManID, EInstanceStatus, InstanceMessage);
                    }
                    strInstance = JsonConvert.SerializeObject(struInst);
                }
            }
            return strInstance;
        }

        /// <summary>
        /// 记录审批意见
        /// </summary>
        /// <param name="InstanceID"></param>
        /// <param name="NodeID"></param>
        /// <param name="ApprovalOpinion"></param>
        /// <param name="OpeManID"></param>
        /// <param name="ApprovalReason"></param>
        void PutDownApprovalOpinion(string InstanceID, string NodeID, EApprovalOpinion ApprovalOpinion, string OpeManID, string ApprovalReason)
        {
            DateTime now = DateTime.Now;
            CDataHelper.ExecuteNonQuery("update "+CTableName.FlowChartReceiver+" set [approval_opinion]='" + ApprovalOpinion + "',operate_time='"+now.ToString()+"',approval_status='"+EApprovalStatus.Complete.ToString()+"',approval_reason='"+ApprovalReason+"' where [instance_id]='" + InstanceID + "' and [node_id]='" + NodeID + "' and [user_id]='" + OpeManID + "' and [approval_status]='"+EApprovalStatus.Active.ToString()+"'");
        }

        bool IsThroughPut(string InstanceID,string NodeID)
        {
            bool ThroughPut = false;
            double ThroughPutRateThreshold = 1;
            double ThroughPutRate = GetThroughPut(InstanceID, NodeID);
            if (ThroughPutRate >= ThroughPutRateThreshold)
            {
                ThroughPut = true;
            }
            return ThroughPut;
        }

        double GetThroughPut(string InstanceID, string NodeID)
        {
            double ThroughPutRate = 0;
            int LastApprovalNum = CPutDownReceiver.GetLastApprovalNum(InstanceID, NodeID);
            string strReceiverNum = CDataHelper.GetData("select count(*) from " + CTableName.FlowChartReceiver+" where instance_id='" + InstanceID + "' and node_id='" + NodeID + "' and approval_num='"+ LastApprovalNum.ToString()+"'");
            string strApprovalNum = CDataHelper.GetData("select count(*) from " + CTableName.FlowChartReceiver + " where instance_id='" + InstanceID + "' and node_id='" + NodeID + "' and approval_num='" + LastApprovalNum.ToString() + "' and [approval_opinion]='同意'");
            if (strApprovalNum != null && strReceiverNum != null)
            {
                int ReceiverNum = Convert.ToInt32(strReceiverNum);
                int ApprvovalNum = Convert.ToInt32(strApprovalNum);
                ThroughPutRate = ApprvovalNum * 1.0 / ReceiverNum;
            }
            return ThroughPutRate;
        }

        void WriteLog(string str)
        {
            CLog.WriteLog(str);
        }
    }

    /// <summary>
    /// 表示流程流转信息的结构体
    /// </summary>
    public struct struWFJoin
    {
        public string StartNode;
        public string EndNode;
        public string SourcePoint;
        public string TargetPoint;
        public string Line;
        public struWFJoin(string StartNode, string EndNode, string SourcePoint, string TargetPoint, string Line)
        {
            this.StartNode = StartNode;
            this.EndNode = EndNode;
            this.SourcePoint = SourcePoint;
            this.TargetPoint = TargetPoint;
            this.Line = Line;
        }
    }

    /// <summary>
    /// 表示工作流实例信息的结构体
    /// </summary>
    public struct struInstance
    {
        public string FlowName;
        public string FlowID;
        public string FlowVersion;
        public string InstanceID;
        public string CreateDate;
        public string CreateManName;
        public string CreateManID;
        public string EInstanceStatus;
        public string InstanceMessage;
        public struInstance(string FlowName, string FlowID, string FlowVersion, string InstanceID, string CreateDate, string CreateManName, string CreateManID, string EInstanceStatus, string InstanceMessage)
        {
            this.FlowName = FlowName;
            this.FlowID = FlowID;
            this.FlowVersion = FlowVersion;
            this.InstanceID = InstanceID;
            this.CreateDate = CreateDate;
            this.CreateManName = CreateManName;
            this.CreateManID = CreateManID;
            this.EInstanceStatus = EInstanceStatus;
            this.InstanceMessage = InstanceMessage;
        }
    }
}
