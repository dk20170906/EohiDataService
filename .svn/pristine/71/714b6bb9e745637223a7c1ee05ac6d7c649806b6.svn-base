using EohiDataServerApi.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace EohiDataServerApi.Areas.ThreeD.Controllers
{
    public class MenuController : Controller
    {
        EFDBHelper<api_menu> dbhelper = new EFDBHelper<api_menu>();
        EFDBHelper<api_user_role> dbuserrole = new EFDBHelper<api_user_role>();
        EFDBHelper<api_role_menu> dbrolemenu = new EFDBHelper<api_role_menu>();
        private static List<api_menu> allListMenu = new List<api_menu>();
        public JsonResult MenuJsonDataRoot(string pguid)
        {
            var listMenu = dbhelper.GetAll(u => u.pguid == pguid, u => u.id);

            return Json(listMenu, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// 通过当前用户得到菜单
        /// </summary>
        /// <returns></returns>
        public JsonResult MenuJsonDataByUserGuid(string pguid)
        {
            List<api_menu> api_Menus = new List<api_menu>();
            if (HttpContext.Session["admin"] != null)
            {
                var api_User = HttpContext.Session["admin"] as Models.api_user;
                if (api_User != null && api_User.user_id.Length > 0)
                {
                    var userrloleguids = dbuserrole.GetAll(u => u.user_guid == api_User.user_id, u => u.id);
                    if (userrloleguids.Count > 0)
                    {
                        IEnumerable<api_role_menu> rolemenuguids = new List<api_role_menu>();

                        userrloleguids.ForEach(u =>
                        {
                            rolemenuguids = rolemenuguids.Union(dbrolemenu.GetAll(n => n.role_guid == u.role_guid, n => n.id));
                        });
                        if (rolemenuguids.Count() > 0)
                        {
                            rolemenuguids.ToList().ForEach(u => api_Menus.Add(dbhelper.GetAll(k => k.guid == u.menu_guid, k => k.id).FirstOrDefault()));
                        }
                    }
                    apimenus.Clear();
                    menuguids.Clear();
                    api_Menus.ForEach(mk =>
                    {
                        GetRootMenus(api_Menus,mk);
                    });
                    IEnumerable<api_menu> api_Menusroots = new List<api_menu>();
                    if (apimenus.Count>0)
                    {
                        apimenus.ForEach(h =>
                        {
                            api_Menusroots = api_Menusroots.Union(api_Menus.Where(u => u.pguid == pguid));
                        });
                        return Json(api_Menusroots.ToList(), JsonRequestBehavior.AllowGet);
                    }
                }
            }
            else
            {
                return Json(new
                {
                    statusCode = 300,
                    title = "操作提示",
                    message = "暂无可操作权限！"
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(apimenus, JsonRequestBehavior.AllowGet);
        }

        List<api_menu> apimenus = new List<api_menu>();
        List<string> menuguids = new List<string>();
        public void GetRootMenus(List<api_menu> api_Menus, api_menu api_Menu)
        {
            if (api_Menus.Count > 0)
            {
                    var menu = api_Menus.Find(k => k.guid == api_Menu.pguid);
                    if (menu != null)
                    {
                        GetRootMenus(api_Menus, menu);
                    }
                    else
                    {
                        if (!menuguids.Contains(api_Menu.guid))
                        {
                        menuguids.Add(api_Menu.guid);
                            apimenus.Add(api_Menu);
                        }
                    }
            }
        }

        /// <summary>
        /// 菜单样式
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public string GetMenuPatter()
        {
            allListMenu = dbhelper.GetAll<api_menu>();
            List<MenuIconCls> list = new List<MenuIconCls>();
            List<string> listKey = new List<string>();
            if (allListMenu.Count > 0)
            {
                allListMenu.ForEach(u =>
                {
                    MenuIconCls menuIconCls = new MenuIconCls();
                    menuIconCls.Key = u.iconCls;
                    menuIconCls.LconCls = u.iconCls;
                    if (!listKey.Contains(u.iconCls))
                    {
                        listKey.Add(u.iconCls);
                        list.Add(menuIconCls);
                    }
                });
            }
            return JsonConvert.SerializeObject(list);
        }

        public JsonResult GetApiMenuById(int id)
        {
            var apimenu = dbhelper.FindById(id);
            return Json(apimenu, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateInput(false)]
        public JsonResult SaveMenu(string text, string state, string iconCls, string url, string guid, string pguid)
        {
            if (guid != null && guid != "" && guid.Length > 0)
            {
                api_menu api_Menu = dbhelper.GetAll(u => u.guid == guid, u => u.id).FirstOrDefault();

                if (api_Menu != null)
                {
                    api_Menu.text = text;
                    api_Menu.state = state;
                    api_Menu.iconCls = iconCls;
                    api_Menu.url = url;
                    api_Menu.guid = guid;
                    api_Menu.pguid = pguid;
                    dbhelper.Update(api_Menu);
                }
            }
            else
            {
                var menu = new api_menu()
                {
                    text = text,
                    state = state,
                    iconCls = iconCls,
                    url = url,
                    guid = Guid.NewGuid().ToString().ToUpper(),
                    pguid = ""
                };
                dbhelper.Insert(menu);

            }
            int m = dbhelper.SaveChanges();
            if (m > 0)
            {
                return Json(new
                {
                    statusCode = 200,
                    title = "操作提示",
                    message = "恭喜你，保存成功！"
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(m, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DeleteApiMenu(int id)
        {
            if (rolemenuguids.Count>0)
            {

                rolemenuguids.ForEach(mx =>
                {
                    var apimenu = dbrolemenu.FirstOrDefault(u=>u.menu_guid==mx);
                    if (apimenu!=null)
                    {
                        dbrolemenu.Delete(apimenu);
                    }
                });
            }
            int m = GetDeleteIds(id);
            m += dbrolemenu.SaveChanges();
            if (m > 0)
            {
                return Json(new
                {
                    statusCode = 200,
                    title = "操作提示",
                    message = "恭喜你，删除成功！"
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new
            {
                statusCode = 300,
                title = "操作提示",
                message = "删除失败！"
            }, JsonRequestBehavior.AllowGet);

        }
        List<string> rolemenuguids = new List<string>();
        public int GetDeleteIds(int id)
        {
            try
            {
                int m = 0;
                if (id > 0)
                {
                    api_menu api_Menu = dbhelper.FindById(id);

                    if (api_Menu != null && api_Menu.pguid != "")
                    {
                        if (!rolemenuguids.Contains(api_Menu.guid))
                        {
                            rolemenuguids.Add(api_Menu.guid);
                        }
                        dbhelper.Delete(api_Menu);
                        m += dbhelper.SaveChanges();
                        var api_Menum = dbhelper.FirstOrDefault(u => u.pguid == api_Menu.guid);
                        if (api_Menum != null)
                        {
                            if (!rolemenuguids.Contains(api_Menu.guid))
                            {
                                rolemenuguids.Add(api_Menu.guid);
                            }
                            dbhelper.Delete(api_Menum);
                            m += dbhelper.SaveChanges();
                            GetDeleteIds(api_Menum.id);
                        }
                    }
                    List<api_menu> api_Menu1 = dbhelper.GetAll(u => u.pguid == api_Menu.pguid, u => u.id);
                    if (api_Menu1 != null && api_Menu1.Count > 0)
                    {

                    }
                    else
                    {
                        api_menu api_Menu11 = dbhelper.FirstOrDefault(u => u.guid == api_Menu.pguid);
                        if (api_Menu11 != null && api_Menu11.id > 0)
                        {
                            api_Menu11.state = "open";
                            dbhelper.Update(api_Menu11);
                            dbhelper.SaveChanges();
                        }
                    }
                }
                return m;
            }
            catch (Exception ex)
            {
                return 0;
                //   throw;
            }
        }

        [HttpPost]
        [ValidateInput(false)]
        public JsonResult SaveMenuAddNew(string text, string state, string iconCls, string url, string guid, string pguid)
        {
            api_menu api_Menu = new api_menu();
            api_Menu.text = text;
            api_Menu.state = state;
            api_Menu.iconCls = iconCls;
            api_Menu.url = url;
            api_Menu.guid = pguid;
            api_Menu.pguid = guid;

            api_menu api_Menu1 = dbhelper.FirstOrDefault(u => u.guid == pguid);
            if (api_Menu1 != null && api_Menu1.state != "closed")
            {
                api_Menu1.state = "closed";
                dbhelper.Update(api_Menu1);
            }

            bool b = dbhelper.Any(u => u.text == text || u.guid == pguid);
            if (b)
            {
                return Json(new
                {
                    statusCode = 300,
                    title = "操作提示",
                    message = "已存在此节点，请指定新的菜单名称或生成新的Guid"
                }, JsonRequestBehavior.AllowGet);
            }
            dbhelper.Insert(api_Menu);
            int m = dbhelper.SaveChanges();
            return Json(m, JsonRequestBehavior.AllowGet);
        }

        class MenuIconCls
        {
            //菜单id
            public string Key { get; set; }

            //菜单对应的图标的css样式文件
            public string LconCls { get; set; }

        }
    }

}
