/**
 * Created by 郭广平 2018.05.16
 */

(function ($) {

    /**
     * 默认参数
     */
    var defaultOpts = {
        item: '',
        html: '显示文本',
        number: 2056,
        title: '这是一个标题这是一个标题',
        prefix: '￥',
        suffix: '元'

    };

    /**
     * 定义类
     */
    var VFlopNum = function (options) {
        this.options = $.extend({}, defaultOpts, options);

        //记录item值;
        defaultOpts.item = this.options.item;

        div = undefined;
        guidspannumboxid = "";
        this.init();
    }

    VFlopNum.prototype = {
        init: function () {
            var self = this;
            //console.log('test');
            debugger;
            var pdiv = this.options.item;
            var itemno = this.options.itemno;
            var dataPanel2 = $('<div class="data-item-text-number" id="number-' + itemno + '"></div>');
            var width = $(pdiv).width();
            var height = $(pdiv).height();
            dataPanel2.css({
                width: width,
                height: height,
            });
            self.appendHandler(dataPanel2, pdiv);
            //
            self.div = dataPanel2;




            //记载数据
            var viewdata = self.options.viewdata;
            if (viewdata != undefined) {
                //设置数据;
                if (viewdata.datatype == "json") {
                    self.setData_jsondata();
                }
                if (viewdata.datatype == "api") {
                    //检查定时器
                    self.setData_apidata();
                }
            }
            else {
                $("#number-" + itemno).rollNumDaq({
                    deVal: 10000
                });
            }


         
        }
        ,

        initCreateFlopNum(turnObj) {
            var self = this;
            self.number = turnObj.number;
            self.title = turnObj.title;
            self.prefix = turnObj.prefix;
            self.suffix = turnObj.suffix;

   
            if (self.checkNum(self.number)) {//is a number
                self.turnfunc(self.number, self.title, self.prefix, self.suffix);
            } else {//is not a number
                console.log('is note a number');
            }
        }
        ,
        //generate turnNumber
        turnfunc(number, title, prefix, suffix) {
            var self = this;
            var itemno = this.options.itemno;

            var html_turnBox = '' || undefined,
                html_number = '' || undefined,
                html_title = '' || undefined,
                html_prefix = '' || undefined,
                html_suffix = '' || undefined;
            guidspannumboxid = self.NewGuid();
            html_turnBox = $('<div id="' + guidspannumboxid+'"></div>');

            if (title != undefined) {

                html_title = $('<h3>' + title + '</h3>');
                html_title.css(self.options.viewoption.titlecss);
                self.appendHandler(html_title, html_turnBox);
            }
            if (prefix != undefined) {
                html_prefix = $('<span >' + prefix + '</span>');
                html_prefix.css(self.options.viewoption.prefixcss);
                self.appendHandler(html_prefix, html_turnBox);
            }
            if (number != undefined) {
                var guidspannum = self.NewGuid();
                html_number = $('<span  id="' + guidspannum+'">0</span>');
                html_number.css(self.options.viewoption.numcss);
                self.appendHandler(html_number, html_turnBox);
            }
            if (suffix != undefined) {
                html_suffix = $('<span>' + suffix + '</span>');
                html_suffix.css(self.options.viewoption.suffixcss);
                self.appendHandler(html_suffix, html_turnBox);
            }
            html_turnBox.css(self.options.viewoption.backdivcss);

            self.appendHandler(html_turnBox, self.div);
            var count = 0,
                initial = 0,
                step = number / 30;
            var timer = setInterval(function () {
                count += step;
                if (count >= number) {
                    clearInterval(timer);
                    count = number;
                }
                if (count == initial) return;
                initial = parseInt(count);
                $('#' + guidspannum).html(initial);
            }, 30);
        },
        checkNum(number) {
            var re = /^[0-9]+.?[0-9]*/;//whether is a number
            if (!re.test(number)) {
                return false;
            } else {
                if (typeof number === 'number') {
                    return true;
                } else {
                    return false;
                }
            }
        },
        /**
         * 插入容器
         */
        appendHandler: function (handlers, target) {
            for (var i = 0; i < handlers.length; i++) {
                el = handlers[i];
                $(target).append(el);
            }
        }
        ,
        /*
        * 更改大小
        */
        resize: function () {

            var self = this;
            //console.log('test');
            var pdiv = this.options.item;

            //self.resizeDiv = undefined;//拖拽面板
            //更改数据面板大小

            var width = $(pdiv).width();
            var height = $(pdiv).height();

            //更改div
            $(pdiv).children('div.data-item-text-number').css({
                width: width,
                height: height
            });




            //self.resizeDiv.css({
            //    display: 'none'
            //});

        },

        bind: function (object, func) {
            return function () {
                return func.apply(object, arguments);
            }
        }
        ,
        /*
       * 设置数据选项
       */
        setViewdata: function (viewdata) {
            var self = this;
            self.options.viewdata = $.extend({}, self.options.viewdata, viewdata);
            //加载数据
            var viewdata = self.options.viewdata;
            if (viewdata != undefined) {

                //设置数据;
                if (viewdata.datatype == "json") {
                    self.setData_jsondata();
                }
                if (viewdata.datatype == "api") {
                    //检查定时器
                    self.setData_apidata();
                }
            }
            else
                self.div.html(this.options.viewoption.html)
        }
        ,
        /*
        * 设置显示选项;
        */
        setViewoption: function (viewoption) {
            //this.options = $.extend({}, defaultOpts, option);
            var self = this;
            self.options.viewoption = $.extend({}, self.options.viewoption, viewoption);

            debugger;
            var self = this;
            //console.log('test');
            var pdiv = this.options.item;
            //更改div
            var dataview = $(pdiv).children('div.data-item-text-number');

            //更改文本内容
            //dataview.html(this.options.html);
            dataview.css(self.options.viewoption.backdivcss);



        }
        ,
        setData_jsondata: function () {
            var self = this;
            var viewdata = self.options.viewdata;
            var viewoption = self.options.viewoption;
            //从
            var data = viewdata.datajson;
            var turnnumber = {
                number: data[0].value,
                title: viewoption.datadisplay.title,
                prefix: viewoption.datadisplay.prefix,
                suffix: viewoption.datadisplay.suffix,
            };
            self.initCreateFlopNum(turnnumber);
        }
        ,
        setData_apidata: function () {
            var self = this;

            var viewdata = self.options.viewdata;
            var url = viewdata.dataapi.url;

            //从api获取数据
            $.ajax({
                url: url,
                type: "post",
                async: true,
                data: {
                },
                success: function (data) {

                    var turnnumber = {
                        number: data[0].value,
                        title: viewoption.datadisplay.title,
                        prefix: viewoption.datadisplay.prefix,
                        suffix: viewoption.datadisplay.suffix,
                    };
                    self.initCreateFlopNum(turnnumber);

                    //自动请求状态; intervalloading 
                    //自动请求间隔秒数;  intervalsecond
                    if (viewdata.dataapi.intervalloading && viewdata.dataapi.intervalsecond != undefined) {

                        var times = viewdata.dataapi.intervalsecond * 1000;

                        setTimeout(self.bind(self, self.setData_apidata), times);
                    }
                },
                error: function (e) {
                    layer.msg("错误！[" + e.status + "][" + e.statusText + "]", {
                        icon: 1,
                        time: 2000 //2秒关闭（如果不配置，默认是3秒）
                    }, function () {
                        //history.go(0);
                    });
                }
            });
        }

        ,

        S4: function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        },
        NewGuid: function () {
            return (this.S4() + this.S4() + "-" + this.S4() + "-" + this.S4() + "-" + this.S4() + "-" + this.S4() + this.S4() + this.S4());
        },


    }
    window.VFlopNum = VFlopNum;

})(jQuery);